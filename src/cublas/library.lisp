(in-package :cl-tensor.cublas)


;;; Define and Use libcublas
(define-foreign-library libcublas
  (:unix "libcublas.so")
  (t (:default "libcublas")))

(use-foreign-library libcublas)


;;; Define macro to define cublas_v2.h function
(defmacro defun/cublas_v2 ((cname lisp-name) &body args)
  `(defcfun (,(concatenate 'string cname "_v2") ,lisp-name) cublas-status
     ,@args))

(defmacro defun/cublas_v2* ((cname lisp-name &key lower? (complex? t)) &body args)
  (let ((types (cond ((and lower? complex?)
                      (list #\s #\d #\c #\z))
                     ((and lower? (not complex?))
                      (list #\s #\d))
                     ((and (not lower?) complex?)
                      (list #\S #\D #\C #\Z))
                     ((and (not lower?) (not complex?))
                      (list #\S #\D)))))
    `(progn
       ,@(mapcar
           (lambda (tp)
             `(defun/cublas_v2 (,(substitute tp #\? cname)
                                ,(intern
                                   (string-upcase
                                     (substitute tp #\? (string lisp-name)))))
                ,@args))
           types))))


;;; Define cuBLAS helper functions
(defun/cublas_v2 ("cublasCreate" cublas-create)
  (*handle :pointer))

(defun/cublas_v2 ("cublasDestroy" cublas-destroy)
  (handle cublas-handle))

(defmacro with-cublas-handle (var &body body)
  `(with-foreign-object (,var 'cublas-handle)
     (cublas-create ,var)
     (unwind-protect (multiple-value-prog1 (progn ,@body))
       (cublas-destroy (mem-ref ,var 'cublas-handle)))))

(defun/cublas_v2 ("cublasGetVersion" cublas-get-version)
  (handle cublas-handle)
  (*version :pointer))

(defcfun ("cublasGetProperty" cublas-get-property) cublas-handle
  (type library-property-type)
  (*value :pointer))

(defun/cublas_v2 ("cublasSetStream" cublas-set-stream)
  (handle cublas-handle)
  (stream-id cuda-stream))

(defun/cublas_v2 ("cublasSetWorkspace" cublas-set-workspace)
  (handle cublas-handle)
  (*workspace :pointer)
  (workspace-size-in-bytes :size))

(defun/cublas_v2 ("cublasGetStream" cublas-get-stream)
  (handle cublas-handle)
  (*stream-id :pointer))

(defun/cublas_v2 ("cublasGetPointerMode" cublas-get-pointer-mode)
  (handle cublas-handle)
  (*mode :pointer))

(defun/cublas_v2 ("cublasSetPointerMode" cublas-set-pointer-mode)
  (handle cublas-handle)
  (*mode :pointer))

(defun/cublas_v2 ("cublasSetVector" cublas-set-vector)
  (n :int)
  (elem-size :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2 ("cublasGetVector" cublas-get-vector)
  (n :int)
  (elem-size :int)
  (*x :pointer)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2 ("cublasSetMatrix" cublas-set-matrix)
  (rows :int)
  (cols :int)
  (elem-size :int)
  (*a :pointer)
  (lda :int)
  (*b :pointer)
  (ldb :int))

(defun/cublas_v2 ("cublasGetMatrix" cublas-get-matrix)
  (rows :int)
  (cols :int)
  (elem-size :int)
  (*a :pointer)
  (lda :int)
  (*b :pointer)
  (ldb :int))

(defun/cublas_v2 ("cublasSetVectorAsync" cublas-set-vector-async)
  (n :int)
  (elem-size :int)
  (*host :pointer)
  (incx :int)
  (*device :pointer)
  (incy :int)
  (stream cuda-stream))

(defun/cublas_v2 ("cublasGetVectorAsync" cublas-get-vector-async)
  (n :int)
  (elem-size :int)
  (*device :pointer)
  (incx :int)
  (*host :pointer)
  (incy :int)
  (stream cuda-stream))

(defun/cublas_v2 ("cublasSetMatrixAsync" cublas-set-matrix-async)
  (rows :int)
  (cols :int)
  (elem-size :int)
  (*a :pointer)
  (lda :int)
  (*b :pointer)
  (ldb :int)
  (stream cuda-stream))

(defun/cublas_v2 ("cublasGetMatrixAsync" cublas-get-matrix-async)
  (rows :int)
  (cols :int)
  (element-size :int)
  (*a :pointer)
  (lda :int)
  (*b :pointer)
  (ldb :int)
  (stream cuda-stream))

(defun/cublas_v2 ("cublasSetAtomicsMode" cublas-set-atomics-mode)
  (handle cublas-handle)
  (mode cublas-atomics-mode))

(defun/cublas_v2 ("cublasGetAtomicsMode" cublas-get-atomics-mode)
  (handle cublas-handle)
  (*mode :pointer))

(defun/cublas_v2 ("cublasSetMathMode" cublas-set-math-mode)
  (handle cublas-handle)
  (mode cublas-math))

(defun/cublas_v2 ("cublasGetMathMode" cublas-get-math-mode)
  (handle cublas-handle)
  (*mode :pointer))

(defun/cublas_v2 ("cublasLoggerConfigure" cublas-logger-configure)
  (log-is-on :int)
  (log-to-stdout :int)
  (log-to-stderr :int)
  (log-file-name (:pointer :char)))

(defun/cublas_v2 ("cublasGetLoggerCallback" cublas-get-logger-callback)
  (user-callback :pointer))

(defun/cublas_v2 ("cublasSetLoggerCallback" cublas-set-logger-callback)
  (user-callback cublas-log-callback))


;;; Define cuBLAS level-1 functions
(defun/cublas_v2* ("cublasI?amax" cublas-i?amax :lower? t)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*result :pointer))

(defun/cublas_v2* ("cublasI?amin" cublas-i?amin :lower? t)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*result :pointer))

(defun/cublas_v2* ("cublasI?asum" cublas-?asum :lower? t)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*result :pointer))

(defun/cublas_v2* ("cublas?axpy" cublas-?axpy)
  (handle cublas-handle)
  (n :int)
  (*alpha :pointer)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2* ("cublas?copy" cublas-?copy)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2* ("cublas?dot" cublas-?dot)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int)
  (*result :pointer))

(defun/cublas_v2* ("cublas?nrm2" cublas-?nrm2)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*result :pointer))

(defun/cublas_v2* ("cublas?rot" cublas-?rot)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int)
  (*c :pointer)
  (*s :pointer))

(defun/cublas_v2* ("cublas?rotg" cublas-?rotg)
  (handle cublas-handle)
  (*a :pointer)
  (*b :pointer)
  (*c :pointer))

(defun/cublas_v2* ("cublas?rotm" cublas-?rotm :complex? nil)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int)
  (*param :pointer))

(defun/cublas_v2* ("cublas?rotmg" cublas-?rotmg :complex? nil)
  (handle cublas-handle)
  (*d1 :pointer)
  (*d2 :pointer)
  (*x1 :pointer)
  (*y1 :pointer)
  (*param :pointer))

(defun/cublas_v2* ("cublas?scal" cublas-?scal)
  (handle cublas-handle)
  (n :int)
  (*alpha :pointer)
  (*x :pointer)
  (incx :int))

(defun/cublas_v2* ("cublas?swap" cublas-?swap)
  (handle cublas-handle)
  (n :int)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int))

;;; Define cuBLAS level-2 functions
(defun/cublas_v2* ("cublas?gdmv" cublas-?gdmv)
  (handle cublas-handle)
  (trans cublas-operation)
  (m :int)
  (n :int)
  (kl :int)
  (ku :int)
  (*alpha :pointer)
  (*a :pointer)
  (lda :int)
  (*x :pointer)
  (incx :int)
  (*beta :pointer)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2* ("cublas?gemv" cublas-?gemv)
  (handle cublas-handle)
  (trans cublas-operation)
  (*alpha :pointer)
  (*a :pointer)
  (lda :int)
  (*x :pointer)
  (incx :int)
  (*beta :pointer)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2* ("cublas?ger" cublas-?ger)
  (handle cublas-handle)
  (m :int)
  (n :int)
  (*alpha :pointer)
  (*x :pointer)
  (incx :int)
  (*y :pointer)
  (incy :int)
  (*a :pointer)
  (lda :int))

(defun/cublas_v2* ("cublas?sbmv" cublas-?sbmv :complex? nil)
  (handle cublas-handle)
  (uplo cublas-fill-mode)
  (n :int)
  (k :int)
  (*alpha :pointer)
  (*a :pointer)
  (lda :int)
  (*x :pointer)
  (incx :int)
  (*beta :pointer)
  (*y :pointer)
  (incy :int))

(defun/cublas_v2* ("cublas?spmv" cublas-?spmv :complex? nil)
  (handle cublas-handle)
  (uplo cublas-fill-mode)
  (n :int)
  (*alpha :pointer)
  (*ap :pointer)
  (*x :pointer)
  (incx :int)
  (*beta :pointer)
  (*y :float)
  (incy :int))


#|
(with-cublas-handle *handle
  (with-foreign-objects ((*version :int)
                         (*type 'library-property-type_t)
                         (*value :int))
    (cublas-get-version (mem-ref *handle 'cublas-handle_t) *version)
    (format t "cublasGetVersion: ~A~%" (mem-ref *version :int))
    (cublas-get-property (mem-ref *type 'library-property-type_t) *value)
    (format t "cublasGetProperty: ~A~%" (mem-ref *value :int))))
|#
